//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { ClientBase } from "./ClientBase";

export class RoomsClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    getAllRooms(): Promise<Room[]> {
        let url_ = this.baseUrl + "/rooms";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAllRooms(_response));
        });
    }

    protected processGetAllRooms(response: Response): Promise<Room[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Room.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Room[]>(null as any);
    }

    getUsersInRoom(roomId: number): Promise<User[]> {
        let url_ = this.baseUrl + "/room/users?";
        if (roomId === undefined || roomId === null)
            throw new Error("The parameter 'roomId' must be defined and cannot be null.");
        else
            url_ += "roomId=" + encodeURIComponent("" + roomId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetUsersInRoom(_response));
        });
    }

    protected processGetUsersInRoom(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }
}

export class ChatsClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    chatsByRoom(roomId: number, skip: number, take: number): Promise<Message[]> {
        let url_ = this.baseUrl + "/chats?";
        if (roomId === undefined || roomId === null)
            throw new Error("The parameter 'roomId' must be defined and cannot be null.");
        else
            url_ += "roomId=" + encodeURIComponent("" + roomId) + "&";
        if (skip === undefined || skip === null)
            throw new Error("The parameter 'skip' must be defined and cannot be null.");
        else
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === undefined || take === null)
            throw new Error("The parameter 'take' must be defined and cannot be null.");
        else
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processChatsByRoom(_response));
        });
    }

    protected processChatsByRoom(response: Response): Promise<Message[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Message.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Message[]>(null as any);
    }

    sendMessage(message: Message): Promise<void> {
        let url_ = this.baseUrl + "/chat";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processSendMessage(_response));
        });
    }

    protected processSendMessage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class HealthClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    healthCheck(): Promise<void> {
        let url_ = this.baseUrl + "/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processHealthCheck(_response));
        });
    }

    protected processHealthCheck(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Room implements IRoom {
    id?: number;
    name?: string;

    constructor(data?: IRoom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Room {
        data = typeof data === 'object' ? data : {};
        let result = new Room();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IRoom {
    id?: number;
    name?: string;
}

export class User implements IUser {
    id?: number;
    username?: string;
    azureId?: string | undefined;
    auraPointsLogs?: AuraPointsLog[];

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.azureId = _data["azureId"];
            if (Array.isArray(_data["auraPointsLogs"])) {
                this.auraPointsLogs = [] as any;
                for (let item of _data["auraPointsLogs"])
                    this.auraPointsLogs!.push(AuraPointsLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["azureId"] = this.azureId;
        if (Array.isArray(this.auraPointsLogs)) {
            data["auraPointsLogs"] = [];
            for (let item of this.auraPointsLogs)
                data["auraPointsLogs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    id?: number;
    username?: string;
    azureId?: string | undefined;
    auraPointsLogs?: AuraPointsLog[];
}

export class AuraPointsLog implements IAuraPointsLog {
    id?: number;
    userId?: number;
    points?: number;
    createdOn?: number;
    sourceMessageId?: number | undefined;
    sourceMessage?: Message | undefined;
    user?: User;

    constructor(data?: IAuraPointsLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.points = _data["points"];
            this.createdOn = _data["createdOn"];
            this.sourceMessageId = _data["sourceMessageId"];
            this.sourceMessage = _data["sourceMessage"] ? Message.fromJS(_data["sourceMessage"]) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuraPointsLog {
        data = typeof data === 'object' ? data : {};
        let result = new AuraPointsLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["points"] = this.points;
        data["createdOn"] = this.createdOn;
        data["sourceMessageId"] = this.sourceMessageId;
        data["sourceMessage"] = this.sourceMessage ? this.sourceMessage.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAuraPointsLog {
    id?: number;
    userId?: number;
    points?: number;
    createdOn?: number;
    sourceMessageId?: number | undefined;
    sourceMessage?: Message | undefined;
    user?: User;
}

export class Message implements IMessage {
    id?: number;
    messageContent?: string;
    createdOn?: number;
    senderId?: string;
    roomId?: number;
    replyMessageId?: number | undefined;
    auraPointsLogs?: AuraPointsLog[];
    inverseReplyMessage?: Message[];
    replyMessage?: Message | undefined;

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.messageContent = _data["messageContent"];
            this.createdOn = _data["createdOn"];
            this.senderId = _data["senderId"];
            this.roomId = _data["roomId"];
            this.replyMessageId = _data["replyMessageId"];
            if (Array.isArray(_data["auraPointsLogs"])) {
                this.auraPointsLogs = [] as any;
                for (let item of _data["auraPointsLogs"])
                    this.auraPointsLogs!.push(AuraPointsLog.fromJS(item));
            }
            if (Array.isArray(_data["inverseReplyMessage"])) {
                this.inverseReplyMessage = [] as any;
                for (let item of _data["inverseReplyMessage"])
                    this.inverseReplyMessage!.push(Message.fromJS(item));
            }
            this.replyMessage = _data["replyMessage"] ? Message.fromJS(_data["replyMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        let result = new Message();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["messageContent"] = this.messageContent;
        data["createdOn"] = this.createdOn;
        data["senderId"] = this.senderId;
        data["roomId"] = this.roomId;
        data["replyMessageId"] = this.replyMessageId;
        if (Array.isArray(this.auraPointsLogs)) {
            data["auraPointsLogs"] = [];
            for (let item of this.auraPointsLogs)
                data["auraPointsLogs"].push(item.toJSON());
        }
        if (Array.isArray(this.inverseReplyMessage)) {
            data["inverseReplyMessage"] = [];
            for (let item of this.inverseReplyMessage)
                data["inverseReplyMessage"].push(item.toJSON());
        }
        data["replyMessage"] = this.replyMessage ? this.replyMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMessage {
    id?: number;
    messageContent?: string;
    createdOn?: number;
    senderId?: string;
    roomId?: number;
    replyMessageId?: number | undefined;
    auraPointsLogs?: AuraPointsLog[];
    inverseReplyMessage?: Message[];
    replyMessage?: Message | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}